services:
  minio:
    image: bitnami/minio
    ports:
      - "9001:9001"
    volumes:
      - minio_storage:/bitnami/minio/data
    networks:
      - nodehistj
    healthcheck:
      test: mc ready local || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
  redis:
    image: redis:alpine
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - nodehistj
    healthcheck:
      test: redis-cli ping || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
  kafka:
    image: bitnami/kafka
    restart: unless-stopped
    hostname: kafka
    networks:
      - nodehistj
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
  mongo:
    image: bitnami/mongodb
    networks:
      - nodehistj
    restart: unless-stopped
    environment:
      - MONGODB_ROOT_USER=${MONGODB_ROOT_USERNAME}
      - MONGODB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGODB_DATABASE=nodehistj
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      - mongo-data:/bitnami/mongodb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --eval || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5

  nodehistj-download-nodelists:
    image: gavrilovegor519/nodehistj-download-nodelists
    build:
      context: ./nodehistj-download-nodelists
    networks:
      - nodehistj
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - MINIO_URL=http://minio:9000
      - MINIO_USER=${MINIO_ROOT_USER}
      - MINIO_PASSWORD=${MINIO_ROOT_PASSWORD}
      - FTP_DOWNLOAD_FROM_YEAR=${FTP_DOWNLOAD_FROM_YEAR}
    healthcheck:
      test: curl --fail localhost:8081/actuator/health || grep "UP" || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy

  nodehistj-historic-nodelists:
    image: gavrilovegor519/nodehistj-historic-nodelists
    build:
      context: ./nodehistj-historic-nodelists
      secrets:
        - github_username
        - github_token
    networks:
      - nodehistj
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - MINIO_URL=http://minio:9000
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MINIO_USER=${MINIO_ROOT_USER}
      - MINIO_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MONGODB_HOST=mongo
      - MONGODB_PORT=27017
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
    healthcheck:
      test: curl --fail localhost:8081/actuator/health || grep "UP" || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy

secrets:
  github_username:
    environment: GITHUB_USERNAME
  github_token:
    environment: GITHUB_TOKEN

networks:
  nodehistj:
    driver: bridge

volumes:
  minio_storage:
  mongo-data: