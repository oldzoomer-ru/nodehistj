services:
  minio:
    image: bitnami/minio
    container_name: minio
    ports:
      - "9001:9001"
    volumes:
      - minio_storage:/data
    networks:
      - nodehistj
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9001/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
  redis:
    image: redis:alpine
    container_name: redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_USER: ${REDIS_USER}
      REDIS_USER_PASSWORD: ${REDIS_USER_PASSWORD}
    networks:
      - nodehistj
    volumes:
      - redis_data:/data
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
  kafka:
    image: bitnami/kafka
    container_name: kafka
    restart: unless-stopped
    networks:
      - nodehistj
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  mongo:
    image: bitnami/mongodb
    container_name: mongo
    networks:
      - nodehistj
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db

  nodelistj-download-nodelists:
    image: gavrilovegor519/nodelistj-download-nodelists
    build:
      context: ./nodelistj-download-nodelists
    container_name: nodelistj-download-nodelists
    networks:
      - nodehistj
    restart: unless-stopped
    environment:
      KAFKA_BOOTSTRAP_SERVER: "kafka:9092"
      MINIO_URL: "http://minio:9000"
      MINIO_USER: ${MINIO_ROOT_USER}
      MINIO_PASSWORD: ${MINIO_ROOT_PASSWORD}
      FTP_DOWNLOAD_FROM_YEAR: ${FTP_DOWNLOAD_FROM_YEAR}

  nodehistj-today-nodelist:
    image: gavrilovegor519/nodehistj-today-nodelist
    build:
      context: ./nodehistj-today-nodelist
      secrets:
        - github_username
        - github_token
    container_name: nodehistj-today-nodelist
    networks:
      - nodehistj
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      KAFKA_BOOTSTRAP_SERVER: "kafka:9092"
      MINIO_URL: "http://minio:9000"
      MINIO_USER: ${MINIO_ROOT_USER}
      MINIO_PASSWORD: ${MINIO_ROOT_PASSWORD}

secrets:
  github_username:
    environment: GITHUB_USERNAME
  github_token:
    environment: GITHUB_TOKEN

networks:
  nodehistj:
    driver: bridge

volumes:
  minio_storage:
  redis_data:
  mongo-data: