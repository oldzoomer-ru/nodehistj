# NodehistJ Docker Compose Configuration
#
# Сервисы:
# - redis: Кэширование данных
# - kafka: Очереди сообщений
# - postgres: Основная база данных
# - nodehistj-*: Микросервисы системы
#
# Требуемые переменные окружения:
# DOMAIN - домен приложения
# MINIO_URL, MINIO_ROOT_USER, MINIO_ROOT_PASSWORD - доступ к MinIO
# REDIS_PASSWORD - пароль Redis
# POSTGRES_USER, POSTGRES_PASSWORD - доступ к PostgreSQL
# FTP_DOWNLOAD_FROM_YEAR - год начала загрузки файлов
# GITHUB_USERNAME, GITHUB_TOKEN - для приватных зависимостей
#
# Использование:
# 1. Создать .env файл с переменными
# 2. Запустить: docker compose -f compose-traefik.yml up -d
#
# Версия: 1.0

services:
  redis:
    image: redis:alpine
    networks:
      - nodehistj
    healthcheck:
      test: redis-cli ping || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  kafka:
    image: apache/kafka
    restart: unless-stopped
    hostname: kafka
    networks:
      - nodehistj
    environment:
      - KAFKA_NODE_ID=0
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CLUSTER_ID=2W1h1d0oQ0y6b8aJ9mN8wQ
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "9092"]
      start_period: 60s
      interval: 15s
      timeout: 5s
      retries: 12
  postgres:
    image: postgres:alpine
    networks:
      - nodehistj
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=nodehistj
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nodehistj
    volumes:
      - ./traefik:/etc/traefik/
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Сервис загрузки файлов nodelist с FTP
  # Основные зависимости: MinIO, Kafka
  nodehistj-download-nodelists:
    image: gavrilovegor519/nodehistj-download-nodelists
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: nodehistj-download-nodelists
        SKIP_TESTS: "true"
    networks:
      - nodehistj
    labels:
      - "traefik.enable=false"
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - MINIO_URL=${MINIO_URL}
      - MINIO_USER=${MINIO_USER}
      - MINIO_PASSWORD=${MINIO_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
    depends_on:
      kafka:
        condition: service_healthy

  # Сервис работы с историческими данными nodelist
  # Основные зависимости: MinIO, Kafka, PostgreSQL, Redis
  nodehistj-historic-nodelists:
    image: gavrilovegor519/nodehistj-historic-nodelists
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: nodehistj-historic-nodelists
        SKIP_TESTS: "true"
      secrets:
        - github_username
        - github_token
    networks:
      - nodehistj
    expose:
      - "8080"
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - REDIS_HOST=redis
      - MINIO_URL=${MINIO_URL}
      - MINIO_USER=${MINIO_USER}
      - MINIO_PASSWORD=${MINIO_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    labels:
      - "traefik.http.routers.historic.rule=Host(`${DOMAIN}`) && PathPrefix(`/historic`)"
      - "traefik.http.routers.historic.entrypoints=websecure"
      - "traefik.http.routers.historic.tls.certresolver=myresolver"
      - "traefik.http.routers.historic.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.historic.tls.domains[0].sans=www.${DOMAIN}"
    depends_on:
      traefik:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Сервис работы с актуальными данными nodelist
  # Основные зависимости: MinIO, Kafka, PostgreSQL, Redis
  nodehistj-newest-nodelists:
    image: gavrilovegor519/nodehistj-newest-nodelists
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: nodehistj-newest-nodelists
        SKIP_TESTS: "true"
      secrets:
        - github_username
        - github_token
    networks:
      - nodehistj
    expose:
      - 8080
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - REDIS_HOST=redis
      - MINIO_URL=${MINIO_URL}
      - MINIO_USER=${MINIO_USER}
      - MINIO_PASSWORD=${MINIO_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    labels:
      - "traefik.http.routers.newest.rule=Host(`${DOMAIN}`) && PathPrefix(`/newest`)"
      - "traefik.http.routers.newest.entrypoints=websecure"
      - "traefik.http.routers.newest.tls.certresolver=myresolver"
      - "traefik.http.routers.newest.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.newest.tls.domains[0].sans=www.${DOMAIN}"
    depends_on:
      traefik:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Сервис сравнения исторических и актуальных данных
  # Основные зависимости: Kafka, PostgreSQL, Redis
  nodehistj-history-diff:
    image: gavrilovegor519/nodehistj-history-diff
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: nodehistj-history-diff
        SKIP_TESTS: "true"
      secrets:
        - github_username
        - github_token
    networks:
      - nodehistj
    expose:
      - 8080
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - REDIS_HOST=redis
      - MINIO_URL=${MINIO_URL}
      - MINIO_USER=${MINIO_USER}
      - MINIO_PASSWORD=${MINIO_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    labels:
      - "traefik.http.routers.history-diff.rule=Host(`${DOMAIN}`) && PathPrefix(`/diff`)"
      - "traefik.http.routers.history-diff.entrypoints=websecure"
      - "traefik.http.routers.history-diff.tls.certresolver=myresolver"
      - "traefik.http.routers.history-diff.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.history-diff.tls.domains[0].sans=www.${DOMAIN}"
    depends_on:
      traefik:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

secrets:
  github_username:
    environment: GITHUB_USERNAME
  github_token:
    environment: GITHUB_TOKEN

networks:
  nodehistj:
    driver: bridge

volumes:
  postgres_storage:
  kafka_data:
