services:
  minio:
    image: minio/minio
    networks:
      - nodehistj
    volumes:
      - minio_storage:/data
    command: server --console-address ":9001" /data
    healthcheck:
      test: mc ready local || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-user}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-password}
  redis:
    image: redis:alpine
    networks:
      - nodehistj
    healthcheck:
      test: redis-cli ping || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  redpanda:
    image: redpandadata/redpanda
    restart: unless-stopped
    hostname: redpanda
    networks:
      - nodehistj
    command:
      - redpanda start \
        --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092 \
        --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://redpanda:9092
    volumes:
      - redpanda_dev_data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD", "rpk", "cluster", "health"]
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 3
  postgres:
    image: postgres:alpine
    networks:
      - nodehistj
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./pgsql:/docker-entrypoint-initdb.d/
    healthcheck:
      test: pg_isready -U postgres || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5

  # Сервис загрузки файлов nodelist с FTP
  # Основные зависимости: MinIO, Kafka
  nodehistj-download-nodelists:
    image: gavrilovegor519/nodehistj-download-nodelists
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: nodehistj-download-nodelists
        SKIP_TESTS: "true"
    networks:
      - nodehistj
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=redpanda:9092
      - MINIO_URL=http://minio:9000
      - MINIO_USER=${MINIO_USER:-user}
      - MINIO_PASSWORD=${MINIO_PASSWORD:-password}
      - MINIO_BUCKET=nodehistj
      - FTP_DOWNLOAD_FROM_YEAR=${FTP_DOWNLOAD_FROM_YEAR:-1984}
    depends_on:
      minio:
        condition: service_healthy
      redpanda:
        condition: service_healthy

  # Сервис работы с историческими данными nodelist
  # Основные зависимости: MinIO, Kafka, PostgreSQL, Redis
  nodehistj-historic-nodelists:
    image: gavrilovegor519/nodehistj-historic-nodelists
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: nodehistj-historic-nodelists
        SKIP_TESTS: "true"
      secrets:
        - github_username
        - github_token
    networks:
      - nodehistj
    ports:
      - "8081:8080"
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=redpanda:9092
      - REDIS_HOST=redis
      - MINIO_URL=http://minio:9000
      - MINIO_USER=${MINIO_USER:-user}
      - MINIO_PASSWORD=${MINIO_PASSWORD:-password}
      - MINIO_BUCKET=nodehistj
      - POSTGRES_HOST=postgres:5432
    depends_on:
      minio:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Сервис работы с актуальными данными nodelist
  # Основные зависимости: MinIO, Kafka, PostgreSQL, Redis
  nodehistj-newest-nodelists:
    image: gavrilovegor519/nodehistj-newest-nodelists
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: nodehistj-newest-nodelists
        SKIP_TESTS: "true"
      secrets:
        - github_username
        - github_token
    networks:
      - nodehistj
    ports:
      - "8082:8080"
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=redpanda:9092
      - REDIS_HOST=redis
      - MINIO_URL=http://minio:9000
      - MINIO_USER=${MINIO_USER:-user}
      - MINIO_PASSWORD=${MINIO_PASSWORD:-password}
      - MINIO_BUCKET=nodehistj
      - POSTGRES_HOST=postgres:5432
    depends_on:
      minio:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Сервис сравнения исторических и актуальных данных
  # Основные зависимости: Kafka, PostgreSQL, Redis
  nodehistj-history-diff:
    image: gavrilovegor519/nodehistj-history-diff
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: nodehistj-history-diff
        SKIP_TESTS: "true"
      secrets:
        - github_username
        - github_token
    networks:
      - nodehistj
    ports:
      - "8083:8080"
    restart: unless-stopped
    environment:
      - KAFKA_BOOTSTRAP_SERVER=redpanda:9092
      - REDIS_HOST=redis
      - MINIO_URL=http://minio:9000
      - MINIO_USER=${MINIO_USER:-user}
      - MINIO_PASSWORD=${MINIO_PASSWORD:-password}
      - MINIO_BUCKET=nodehistj
      - POSTGRES_HOST=postgres:5432
    depends_on:
      minio:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

secrets:
  github_username:
    environment: GITHUB_USERNAME
  github_token:
    environment: GITHUB_TOKEN

networks:
  nodehistj:
    driver: bridge

volumes:
  minio_storage:
  postgres_storage:
  redpanda_dev_data: