services:
  minio:
    image: bitnami/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/bitnami/minio/data
    networks:
      - nodehistj
    healthcheck:
      test: mc ready local || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
  redis:
    image: redis:alpine
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - nodehistj
    healthcheck:
      test: redis-cli ping || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  kafka:
    image: bitnami/kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    hostname: kafka
    networks:
      - nodehistj
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5
  postgres:
    image: postgres:alpine
    ports:
      - "5432:5432"
    networks:
      - nodehistj
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=nodehistj
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres || exit 1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 5

networks:
  nodehistj:
    driver: bridge

volumes:
  minio_storage:
  postgres_storage: